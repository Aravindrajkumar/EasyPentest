#! /bin/bash

# --Default values--

# Banner section

banner () {
echo "  #######                     ######                                          "
echo "  #         ##    ####  #   # #     # ###### #    # ##### ######  #####  ##### "
echo "  #        #  #  #       # #  #     # #      ##   #   #   #      #         #   "
echo "  #####   #    #  ####    #   ######  #####  # #  #   #   #####   #####    #   "
echo "  #       ######      #   #   #       #      #  # #   #   #            #   # ${red}╔═╗┬─┐┌─┐┌┬┐┌─┐╦ ╦┌─┐┬─┐┬┌─ ${reset} "
echo "  #       #    # #    #   #   #       #      #   ##   #   ######  #####    # ${red}╠╣ ├┬┘├─┤│││├┤ ║║║│ │├┬┘├┴┐ ${reset} " 
echo "  ####### #    #  ####    #   #       ###### #    #   #   $bold${green}BY - ARAVIND R${reset}$normal   # ${red}╚  ┴└─┴ ┴┴ ┴└─┘╚╩╝└─┘┴└─┴ ┴ ${reset} " 
echo ""
echo "  ---------------------------------------------------------------------------- "
}

# Color variables section

red=`tput setaf 1`
green=`tput setaf 2`
reset=`tput sgr0`

# Bold letter variable

bold=$(tput bold)
normal=$(tput sgr0)

# IP variables

ipv4private=$( hostname -I | awk '{print $1}' )
ipv6private=$( hostname -I | awk '{print $2}' )

# Current interface name

interface_name_wlan0=$( sudo ifconfig | grep wlan0 | awk '{print $1}'| sed 's/://')
interface_name_etho=$( sudo ifconfig | grep eth0 | awk '{print $1}'| sed 's/://')

# Mac address variables

mac_wlan0=$( sudo macchanger -s wlan0 | awk '{print $3}' | head -n 1 )
mac_wlan0mon=$( sudo macchanger -s wlan0mon | awk '{print $3}' | head -n 1 )
mac_eth0=$( sudo macchanger -s eth0 | awk '{print $3}' | head -n 1 )

# --Default functions--

# Install dependencies function

	dependencies () {	
			sudo apt update
			sudo apt install aircrack-ng
			sudo apt install sl
			sudo apt install nmap
		}
# Update & upgrade function

	update () {
			sudo apt update
			sudo apt upgrade
			sudo apt dist-upgrade
			sudo apt autoremove
		}
# IP configuration function

	ip_con () {
			ipv4public=$( curl http://checkip.amazonaws.com )
			ipv6public=$( curl icanhazip.com )
			clear
			banner
			echo ""
			echo "  Your Private IPv4 address is $bold$green$ipv4private$reset$normal " 
			echo "  Your Private IPv6 address is $bold$green$ipv6private$reset$normal "
			echo "  Your Public IPv4 address is $bold$green$ipv4public$reset$normal"
			echo "  Your Public IPv6 address is $bold$green$ipv6public$reset $normal" 
			echo ""
			echo "  $bold$red[1]$reset$normal Change my Private IPv4 address"
			echo ""
			echo " $bold$red[99]$reset$normal Back   "
			echo " $bold$red[00]$reset$normal Exit "
			echo ""
			read -p " Enter Your Option : " option_ip_con 

			if [[ $option_ip_con == 1 ]]
				then
					read -p " Enter New IP : " new_ip 
					sudo ifconfig eth0 $new_ip
					clear
					ip_con
			elif [[ $option_ip_con == 99 ]]
				then
					./EasyPentest.sh
			elif [[ $option_ip_con == 00 ]]
				then
					exit
			else
					clear
					ip_con	
			fi
		}

# Mac address configuration function

	mac_con () {
		# Current interface name

		interface_name_wlan0=$( sudo ifconfig | grep wlan0 | awk '{print $1}'| sed 's/://')

		banner
			if [[ $interface_name_etho == "eth0" &&  $interface_name_wlan0 ==  "" ]]
				then
					echo "Current mac address of interface eth0 is $bold$green$mac_eth0$reset$normal " 
			elif [[ $interface_name_etho == "eth0" &&  $interface_name_wlan0 ==  "wlan0" ]]
				then
					echo "Current mac address of interface eth0 is $bold$green$mac_eth0$reset$normal "
					echo "Current mac address of interface wlan0 is $bold$green$mac_wlan0$reset$normal "
			elif [[ $interface_name_etho == "eth0" &&  $interface_name_wlan0 ==  "wlan0mon" ]]
				then
					echo "Current mac address of interface eth0 is $bold$green$mac_eth0$reset$normal "
					echo "Current mac address of interface wlan0mon is $bold$green$mac_wlan0mon$reset$normal "
			fi
			echo ""
			echo "  $bold$red[1]$reset$normal Change$green eth0$reset mac address "
			echo "  $bold$red[2]$reset$normal Change $green$interface_name_wlan0$reset mac address "
			echo ""
			echo " $bold$red[99]$reset$normal Back   "
			echo " $bold$red[00]$reset$normal Exit  "
			echo ""
			read -p " Enter Your Option : " option

			if [[ $option == 1 ]]
				then
					clear
					banner
					echo ""
					echo " $bold$red[1]$reset$normal Change to a random address "
					echo " $bold$red[2]$reset$normal Create a new address "
					echo ""
					echo " $bold$red[99]$reset$normal Back "
					echo " $bold$red[00]$reset$normal Exit "
					echo ""
					read -p " Enter Your Option : " option
					if [[ $option == 1 ]]
						then
							sudo macchanger -r eth0
					elif [[ $option == 2 ]]
						then
						read -p " Enter New Mac Address : " new_mac_eth0
						sudo ifconfig eth0 down
						sudo macchanger -m $new_mac eth0
						sudo ifconfig eth0 up
						mac_con
						elif [[ $option == 99 ]]
							then
							clear
								banner
								mac_con
						elif [[ $option == 00 ]]
							then
								exit
						fi
			elif [[ $option == 2 ]]
				then
					clear
					banner
					echo ""
					echo " $bold$red[1]$reset$normal Change to a random address "
					echo " $bold$red[2]$reset$normal Create a new address "
					echo ""
					echo " $bold$red[99]$reset$normal Back "
					echo " $bold$red[00]$reset$normal Exit "
					echo ""
					read -p " Enter Your Option : " option
					if [[ $option == 1 ]]
						then
							sudo macchanger -r eth0
					elif [[ $option == 2 ]]
						then
						read -p " Enter New Mac Address : " new_mac
					sudo ifconfig $interface_name_wlan0 down
					sudo macchanger -m $new_mac $interface_name_wlan0
					sudo ifconfig $interface_name_wlan0 up
					mac_con
					elif [[ $option == 99 ]]
						then
							clear
							banner
							mac_con
					elif [[ $option == 00 ]]
						then
							exit
					fi
			elif [[ $option == 99 ]]
				then
					./EasyPentest.sh
			elif [[ $option == 00 ]]
				then
					exit
			else
					clear
					mac_con	
			fi
			
		} 

# Monitor mode function

	mon_mode () {
		clear
		# Current interface name

		interface_name_wlan0=$( sudo ifconfig | grep wlan0 | awk '{print $1}'| sed 's/://')

		banner
			if [[ $interface_name_wlan0 == "" ]]
				then
					echo ""
					echo "$bold$red No wireless interface present$reset$normal "
					echo ""
			elif [[ $interface_name_wlan0 == "wlan0" ]]
				then
					echo ""
					echo " Your wireless interface $bold$green$interface_name_wlan0$reset$normal is not in Monitor mode"
					echo ""
			elif [[ $interface_name_wlan0 == "wlan0mon" ]]
				then
					echo ""
					echo " Your wireless interface $bold$green$interface_name_wlan0$reset$normal is in Monitor mode  "
					echo ""
			fi
			echo "  $bold$red[1]$reset$normal Turn on monitor mode "
			echo "  $bold$red[2]$reset$normal Turn off monitor mode "
			echo "  $bold$red[3]$reset$normal Rescan for wireless interfaces "
			echo ""
			echo " $bold$red[99]$reset$normal Back  "
			echo " $bold$red[00]$reset$normal Exit  "
			echo ""
			read -p " Enter Your Option : " option_mon_mode

			if [[ $option_mon_mode == 1 ]]
				then
					sudo airmon-ng start $interface_name_wlan0
					clear
					mon_mode
			elif [[ $option_mon_mode == 2 ]]
				then
					sudo airmon-ng stop $interface_name_wlan0
					clear
					mon_mode
			elif [[ $option_mon_mode == 3 ]]
				then
					
					clear
					mon_mode
			elif [[ $option_mon_mode == 99 ]]
				then
					./EasyPentest.sh
			elif [[ $option_mon_mode == 00 ]]
				then
					exit
			else
					clear
					mon_mode
			fi
		}

# Anonymity services function

	anonymity_services () {
			clear
			banner
			echo ""
			echo "  $bold$red[1]$reset$normal Start tor service  "
			echo "  $bold$red[2]$reset$normal Stop tor service  "
			echo ""
			echo " $bold$red[99]$reset$normal Back  "
			echo " $bold$red[00]$reset$normal Exit  "
			echo ""
			read -p " Enter Your Option : " option		

			if [[ $option == 1 ]]
				then
					sudo service tor start
			elif [[ $option == 2 ]]
				then
					sudo service tor stop
			elif [[ $option == 99 ]]
				then
					./EasyPentest
			elif [[ $option == 00 ]]
				then
					exit
			else
					clear
					anonymity_services
			fi
			}

# Nmap scan function

	nmap_scan () {

		banner
		echo " $bold Note: $normal"
		echo " $bold$red Port scanning using any tool is considered illegal and can result in jail term/penalty or legal action. $reset$normal  "
		echo ""
		echo "  $bold$red[1]$reset$normal Nmap port scan "
		echo "  $bold$red[2]$reset$normal Nmap OS scan "
		echo "  $bold$red[3]$reset$normal  "
	}

# Front page / starting page

clear
banner
echo ""
echo "  $bold$red[1]$reset$normal Install Dependencies "
echo "  $bold$red[2]$reset$normal Update EasyPentest  "
echo "  $bold$red[3]$reset$normal Update Kali "
echo "  $bold$red[4]$reset$normal IP Configuration ($bold$green$ipv4private$reset$normal) "
echo "  $bold$red[5]$reset$normal Mac Configuration ($bold$green$mac_eth0$reset$normal) " 
echo "  $bold$red[6]$reset$normal Monitor Mode  "
echo "  $bold$red[7]$reset$normal Tor service "
echo "  $bold$red[8]$reset$normal Simple Nmap scan "
echo "  $bold$red[9]$reset$normal Crack wifi password "
echo " $bold$red[00]$reset$normal Exit "
echo ""
echo "" 
echo ""
read -p "Enter Your Option:" option

# Install dependencies section

	if [[ $option == "1" ]]
		then	
			clear
 			dependencies
			./EasyPentest.sh

# Kali update & upgrade section
 
	elif [[ $option == "3" ]]
		then
			clear
			update
			./EasyPentest.sh

# Ip configuration section

	elif [[ $option == "4" ]]
		then
	 		clear
			
			ip_con

# Mac configuration section

	elif [[ $option == "5" ]]
		then
			clear
			mac_con
# Monitomode section

	elif [[ $option == "6" ]]
		then
			clear
			mon_mode

# Services section

	elif [[ $option == "7" ]]
		then
			clear
			anonymity_services

# Nmap scan section

	elif [[ $option == "8" ]]
		then
			clear
			nmap_scan

# Exit section

	elif [[ $option == "00" ]]
		then
			exit
# Default section

	else
			./EasyPentest.sh
 	fi